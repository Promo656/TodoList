{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","Store/todoListsReducer.ts","Store/taskReducer.ts","AppWithRedux.tsx","Store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","newTasksTitle","setNewTasksTitle","error","setError","addTasks","trim","addItem","TextField","variant","label","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","Task","onRemoveHandler","useCallback","removeTask","task","id","todoListId","onChangeHandler","changeTaskStatus","checked","onChangeTitleHandler","changeTaskTitle","key","className","isDone","s","Checkbox","Delete","Todolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","removeTodoList","addTask","changeTodolistTitle","filteredTasks","tasks","filter","t","map","Button","todoListId1","v1","todoListId2","initialState","AppWithRedux","dispatch","useDispatch","todoLists","useSelector","state","tasksObj","todolistId","action","type","addTaskAC","taskId","removeTaskAC","removeTodolistAC","changeStatus","changeTaskStatusAC","changeTodolistFilterAC","addTodolist","addTodolistAC","changeTaskTitleAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","style","minWidth","Grid","container","padding","spacing","tl","item","Paper","elevation","rootReducers","combineReducers","todolist","find","stateCopy","newTask","newTasks","todoListTask","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.05132d8e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. AppWithReducers is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from \"../App.module.css\";\r\nimport {Button, Icon, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n    console.log(\"AddItemForm is rendering\")\r\n\r\n    const [newTasksTitle, setNewTasksTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTasksTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTasks()\r\n        }\r\n    }\r\n    const addTasks = () => {\r\n        if (newTasksTitle.trim() !== \"\") {\r\n            props.addItem(newTasksTitle)\r\n            setNewTasksTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                label={\"Name\"}\r\n                value={newTasksTitle}\r\n                onChange={onNewTitleChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton onClick={addTasks} color={\"primary\"}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange:(value:string)=>void\r\n}\r\n\r\nexport const EditableSpan=React.memo((props: EditableSpanType)=> {\r\n    console.log(\"EditableSpan is rendering\")\r\n\r\n    let [editMode, setEditMode]=useState(false)\r\n    let [title, setTitle]=useState(\"\")\r\n\r\n    let activateEditMode=()=> {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    let activateViewMode=()=> {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    let onChangeTitleHandler=(e:ChangeEvent<HTMLInputElement>)=>setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField onChange={onChangeTitleHandler} onBlur={activateViewMode}  value={title} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport s from \"./App.module.scss\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, todolistId: string, value: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    task: TaskType\r\n    todoListId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onRemoveHandler = useCallback(() => {\r\n        props.removeTask(props.task.id, props.todoListId)\r\n    }, [props.removeTask, props.task.id, props.todoListId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked, props.todoListId)\r\n    }, [props.changeTaskStatus, props.task.id, props.todoListId])\r\n\r\n    const onChangeTitleHandler = useCallback((value: string) => {\r\n        props.changeTaskTitle(props.task.id, props.todoListId, value)\r\n    }, [props.changeTaskTitle, props.task.id, props.todoListId])\r\n\r\n    return <div key={props.task.id}\r\n                className={props.task.isDone ? s.isDone : \"\"}>\r\n        <Checkbox\r\n            color={\"primary\"}\r\n            onChange={onChangeHandler}\r\n            checked={props.task.isDone}\r\n        />\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n        <IconButton onClick={onRemoveHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from \"./AppWithReducers\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    id: string\r\n    changeTodolistTitle: (todolistId: string, title: string) => void\r\n    removeTodoList: (todolistId: string) => void\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, todolistId: string, value: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log(\"Todolist is rendering\")\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }, [props.changeFilter, props.id])\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        props.removeTodoList(props.id)\r\n    }, [props.removeTodoList, props.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    let filteredTasks = props.tasks\r\n    if (props.filter === \"active\") {\r\n        filteredTasks = props.tasks.filter(t => t.isDone == false)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        filteredTasks = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodoList}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                filteredTasks.map((t) =>\r\n                    <Task\r\n                        key={t.id}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        removeTask={props.removeTask}\r\n                        todoListId={props.id}\r\n                        task={t}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === \"all\" ? \"contained\" : \"outlined\"} color={\"default\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button variant={props.filter === \"active\" ? \"contained\" : \"outlined\"} color={\"primary\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"} color={\"secondary\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {FilterValuesType, TodoListType} from \"../AppWithReducers\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type ActionType =\r\n    RemoveTodolistAT\r\n    | AddTodolistAT\r\n    | ChangeTodolistTitleAT\r\n    | ChangeTodolistFilterAT\r\n\r\n\r\nexport const todoListId1 = v1()\r\nexport const todoListId2 = v1()\r\n\r\nconst initialState: Array<TodoListType> = [\r\n    {id: todoListId1, title: \"What to buy\", filter: \"all\"},\r\n    {id: todoListId2, title: \"What to learn\", filter: \"all\"}\r\n]\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{id: action.todolistId, title: action.title, filter: \"all\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//--------------------------------------REMOVE-TODOLIST-----------------------------\r\nexport type RemoveTodolistAT = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    id: string\r\n}\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistAT => {\r\n    return {type: \"REMOVE-TODOLIST\", id: todolistId}\r\n}\r\n//--------------------------------------ADD-TODOLIST-----------------------------\r\nexport type AddTodolistAT = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistAT => {\r\n    return {type: 'ADD-TODOLIST', title, todolistId: v1()}\r\n}\r\n//--------------------------------------CHANGE-TODOLIST-TITLE----------------------\r\nexport type ChangeTodolistTitleAT = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport const changeTodolistTitleAC = (todoListId: string, title: string): ChangeTodolistTitleAT => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todoListId, title: title}\r\n}\r\n//--------------------------------------CHANGE-TODOLIST-FILTER----------------------\r\nexport type ChangeTodolistFilterAT = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport const changeTodolistFilterAC = (todoListId: string, filter: FilterValuesType): ChangeTodolistFilterAT => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: todoListId, filter: filter}\r\n}","import {TaskStateType} from \"../AppWithReducers\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistAT, RemoveTodolistAT, todoListId1, todoListId2} from \"./todoListsReducer\";\r\n\r\nexport type ActionType =\r\n    RemoveTaskAT\r\n    | AddTaskAT\r\n    | ChangeTaskStatusAT\r\n    | ChangeTaskTitleAT\r\n    | AddTodolistAT\r\n    | RemoveTodolistAT\r\n\r\nconst initialState: TaskStateType = {\r\n    [todoListId1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false}],\r\n    [todoListId2]: [\r\n        {id: v1(), title: \"Hello world\", isDone: true},\r\n        {id: v1(), title: \"I am Happy\", isDone: false},\r\n        {id: v1(), title: \"Yo!!\", isDone: false}]\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.taskId)\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTask = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const newTasks = [newTask, ...tasks]\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todoListTask = state[action.todolistId]\r\n            state[action.todolistId] = todoListTask\r\n                .map((t) => t.id === action.taskId\r\n                    ? {...t, isDone: action.isDone}\r\n                    : t)\r\n            return ({...state})\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todoListTask = state[action.todolistId]\r\n            state[action.todolistId] = todoListTask\r\n                .map((t) => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t)\r\n            return ({...state})\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//--------------------------------------REMOVE-TASK-----------------------------\r\nexport type RemoveTaskAT = {\r\n    type: \"REMOVE-TASK\"\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskAT => {\r\n    return {type: \"REMOVE-TASK\", taskId, todolistId}\r\n}\r\n//--------------------------------------ADD-TASK-----------------------------\r\nexport type AddTaskAT = {\r\n    type: \"ADD-TASK\"\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskAT => {\r\n    return {type: \"ADD-TASK\", title, todolistId}\r\n}\r\n//--------------------------------------CHANGE-TASK-STATUS-----------------------------\r\nexport type ChangeTaskStatusAT = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    taskId: string\r\n    todolistId: string\r\n    isDone: boolean\r\n}\r\nexport const changeTaskStatusAC = (taskId: string,\r\n                                   isDone: boolean,\r\n                                   todolistId: string): ChangeTaskStatusAT => {\r\n    return {type: \"CHANGE-TASK-STATUS\", taskId, todolistId, isDone}\r\n}\r\n//--------------------------------------CHANGE-TASK-TITLE-----------------------------\r\nexport type ChangeTaskTitleAT = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport const changeTaskTitleAC = (taskId: string,\r\n                                  title: string,\r\n                                  todolistId: string): ChangeTaskTitleAT => {\r\n    return {type: \"CHANGE-TASK-TITLE\", taskId, title, todolistId}\r\n}","import React, {useCallback} from 'react';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTodolistAC, changeTodolistFilterAC, changeTodolistTitleAC, removeTodolistAC} from \"./Store/todoListsReducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./Store/taskReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"./Store/store\";\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction AppWithRedux() {\r\n    console.log(\"AppWithRedux is rendering\")\r\n\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector<AppRootState, Array<TodoListType>>((state) => state.todoLists)\r\n    const tasksObj = useSelector<AppRootState, TaskStateType>((state) => state.tasks)\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todolistId: string) => {\r\n        const action = removeTodolistAC(todolistId)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(taskId, isDone, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListId: string) => {\r\n        const action = changeTodolistFilterAC(todoListId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, todolistId: string, title: string) => {\r\n        const action = changeTaskTitleAC(taskId, title, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        const action = changeTodolistTitleAC(todolistId, title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container style={{minWidth:\"290px\"}}>\r\n                <Grid container style={{padding: \"10px 0\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map((tl) => {\r\n\r\n                            let filteredTasks = [...tasksObj[tl.id]]\r\n\r\n                            return (\r\n                                <Grid item key={tl.id}>\r\n                                    <Paper elevation={4} style={{padding: \"10px\"}}>\r\n                                        <Todolist title={tl.title}\r\n                                                  id={tl.id}\r\n\r\n                                                  tasks={filteredTasks}\r\n                                                  removeTask={removeTask}\r\n                                                  changeFilter={changeFilter}\r\n                                                  addTask={addTask}\r\n                                                  changeTaskStatus={changeStatus}\r\n                                                  filter={tl.filter}\r\n                                                  removeTodoList={removeTodoList}\r\n                                                  changeTaskTitle={changeTaskTitle}\r\n                                                  changeTodolistTitle={changeTodolistTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    )}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {todoListsReducer} from \"./todoListsReducer\";\r\nimport {tasksReducer} from \"./taskReducer\";\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducers>\r\n\r\nconst rootReducers = combineReducers({\r\n    todoLists: todoListsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\nexport const store = createStore(rootReducers,(window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}